/**
 * Copyright (C) 2015 Deepin Technology Co., Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 **/

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusTimedate -p dbustimedate com.deepin.daemon.Timedate.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSTIMEDATE_H_1439898889
#define DBUSTIMEDATE_H_1439898889

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtCore/QDebug>
#include <QtDBus/QtDBus>

class ZoneInfo
{
public:
    ZoneInfo();
    static void registerMetaType();

    friend QDebug operator<<(QDebug argument, const ZoneInfo &info);
    friend QDBusArgument &operator<<(QDBusArgument &argument, const ZoneInfo &info);
    friend QDataStream &operator<<(QDataStream &argument, const ZoneInfo &info);
    friend const QDBusArgument &operator>>(const QDBusArgument &argument, ZoneInfo &info);
    friend const QDataStream &operator>>(QDataStream &argument, ZoneInfo &info);

    bool operator==(const ZoneInfo &what) const;

public:
    inline QString getZoneName() const {return m_zoneName;}
    inline QString getZoneCity() const {return m_zoneCity;}
    inline int getUTCOffset() const {return m_utcOffset;}

private:
    QString m_zoneName;
    QString m_zoneCity;
    int m_utcOffset;
    qint64 i2;
    qint64 i3;
    int i4;
};

Q_DECLARE_METATYPE(ZoneInfo)

/*
 * Proxy class for interface com.deepin.daemon.Timedate
 */
class DBusTimedate: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage &msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count()) {
            return;
        }
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName != "com.deepin.daemon.Timedate") {
            return;
        }
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        QStringList keys = changedProps.keys(); foreach(const QString & prop, keys) {
            const QMetaObject *self = metaObject();
            for (int i = self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
                    Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
    }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Timedate"; }

public:
    DBusTimedate(QObject *parent = 0);

    ~DBusTimedate();

    Q_PROPERTY(bool CanNTP READ canNTP NOTIFY CanNTPChanged)
    inline bool canNTP() const
    { return qvariant_cast< bool >(property("CanNTP")); }

    Q_PROPERTY(int DSTOffset READ dSTOffset WRITE setDSTOffset NOTIFY DSTOffsetChanged)
    inline int dSTOffset() const
    { return qvariant_cast< int >(property("DSTOffset")); }
    inline void setDSTOffset(int value)
    { setProperty("DSTOffset", QVariant::fromValue(value)); }

    Q_PROPERTY(bool LocalRTC READ localRTC NOTIFY LocalRTCChanged)
    inline bool localRTC() const
    { return qvariant_cast< bool >(property("LocalRTC")); }

    Q_PROPERTY(bool NTP READ nTP NOTIFY NTPChanged)
    inline bool nTP() const
    { return qvariant_cast< bool >(property("NTP")); }

    Q_PROPERTY(QString Timezone READ timezone NOTIFY TimezoneChanged)
    inline QString timezone() const
    { return qvariant_cast< QString >(property("Timezone")); }

    Q_PROPERTY(bool Use24HourFormat READ use24HourFormat WRITE setUse24HourFormat NOTIFY Use24HourFormatChanged)
    inline bool use24HourFormat() const
    { return qvariant_cast< bool >(property("Use24HourFormat")); }
    inline void setUse24HourFormat(bool value)
    { setProperty("Use24HourFormat", QVariant::fromValue(value)); }

    Q_PROPERTY(QStringList UserTimezones READ userTimezones NOTIFY UserTimezonesChanged)
    inline QStringList userTimezones() const
    { return qvariant_cast< QStringList >(property("UserTimezones")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AddUserTimezone(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("AddUserTimezone"), argumentList);
    }

    inline QDBusPendingReply<> DeleteUserTimezone(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DeleteUserTimezone"), argumentList);
    }

    inline QDBusPendingReply<ZoneInfo> GetZoneInfo(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("GetZoneInfo"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetZoneList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetZoneList"), argumentList);
    }

    inline QDBusPendingReply<> SetDate(int in0, int in1, int in2, int in3, int in4, int in5, int in6)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2) << QVariant::fromValue(in3) << QVariant::fromValue(in4) << QVariant::fromValue(in5) << QVariant::fromValue(in6);
        return asyncCallWithArgumentList(QStringLiteral("SetDate"), argumentList);
    }

    inline QDBusPendingReply<> SetLocalRTC(bool in0, bool in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("SetLocalRTC"), argumentList);
    }

    inline QDBusPendingReply<> SetNTP(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetNTP"), argumentList);
    }

    inline QDBusPendingReply<> SetTime(qlonglong in0, bool in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("SetTime"), argumentList);
    }

    inline QDBusPendingReply<> SetTimezone(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetTimezone"), argumentList);
    }

Q_SIGNALS: // SIGNALS
// begin property changed signals
    void CanNTPChanged();
    void DSTOffsetChanged();
    void LocalRTCChanged();
    void NTPChanged();
    void TimezoneChanged();
    void Use24HourFormatChanged();
    void UserTimezonesChanged();
};

namespace com
{
namespace deepin
{
namespace daemon
{
typedef ::DBusTimedate Timedate;
}
}
}
#endif
