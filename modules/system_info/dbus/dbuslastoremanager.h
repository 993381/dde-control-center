/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusLastoreManager -p dbuslastoremanager org.deepin.lastore.Manager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSLASTOREMANAGER_H_1446083364
#define DBUSLASTOREMANAGER_H_1446083364

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include "mirrorinfo.h"
#include "appupdateinfo.h"

/*
 * Proxy class for interface org.deepin.lastore.Updater
 */
class DBusLastoreManager: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName !="org.deepin.lastore.Updater")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        QStringList keys = changedProps.keys();
        foreach(const QString &prop, keys) {
        const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
 	            Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "org.deepin.lastore.Updater"; }

public:
    DBusLastoreManager(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DBusLastoreManager();

    Q_PROPERTY(bool AutoCheckUpdates READ autoCheckUpdates NOTIFY AutoCheckUpdatesChanged)
    inline bool autoCheckUpdates() const
    { return qvariant_cast< bool >(property("AutoCheckUpdates")); }

    Q_PROPERTY(QString MirrorSource READ mirrorSource NOTIFY MirrorSourceChanged)
    inline QString mirrorSource() const
    { return qvariant_cast< QString >(property("MirrorSource")); }

    Q_PROPERTY(QString OfficialSource READ officialSource NOTIFY OfficialSourceChanged)
    inline QString officialSource() const
    { return qvariant_cast< QString >(property("OfficialSource")); }

    Q_PROPERTY(QStringList UpdatableApps1 READ updatableApps1 NOTIFY UpdatableApps1Changed)
    inline QStringList updatableApps1() const
    { return qvariant_cast< QStringList >(property("UpdatableApps1")); }

    Q_PROPERTY(QStringList UpdatablePackages1 READ updatablePackages1 NOTIFY UpdatablePackages1Changed)
    inline QStringList updatablePackages1() const
    { return qvariant_cast< QStringList >(property("UpdatablePackages1")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<AppUpdateInfo> ApplicationUpdateInfos1(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("ApplicationUpdateInfos1"), argumentList);
    }

    inline QDBusPendingReply<QList<MirrorInfo>> ListMirrorSources(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("ListMirrorSources"), argumentList);
    }

    inline QDBusPendingReply<> SetAutoCheckUpdates(bool in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetAutoCheckUpdates"), argumentList);
    }

    inline QDBusPendingReply<> SetMirrorSource(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetMirrorSource"), argumentList);
    }

Q_SIGNALS: // SIGNALS
// begin property changed signals
void AutoCheckUpdatesChanged();
void MirrorSourceChanged();
void OfficialSourceChanged();
void UpdatableApps1Changed();
void UpdatablePackages1Changed();
};

namespace org {
  namespace deepin {
    namespace lastore {
      typedef ::DBusLastoreManager Updater;
    }
  }
}
#endif
