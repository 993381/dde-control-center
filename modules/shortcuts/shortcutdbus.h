/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c ShortcutDbus -p shortcutdbus.h:shortcutdbus.cpp file
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SHORTCUTDBUS_H_1439281024
#define SHORTCUTDBUS_H_1439281024

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.KeyBinding
 */
struct ShortcutInfo{
    qint32 id;
    QString title;
    QString shortcut;
};

typedef QList<int> intList;
typedef QList<ShortcutInfo> ShortcutInfoList;

Q_DECLARE_METATYPE(intList)
Q_DECLARE_METATYPE(ShortcutInfo)
Q_DECLARE_METATYPE(ShortcutInfoList)

QDBusArgument& operator<<(QDBusArgument& arg, const ShortcutInfo& info);
const QDBusArgument& operator>>(const QDBusArgument& arg, ShortcutInfo& info);

class ShortcutDbus: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName != staticInterfaceName())
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        foreach(const QString &prop, changedProps.keys()) {
            const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
                    QVariant v = p.read(this);
                    Q_EMIT p.notifySignal().invoke(this, QGenericArgument(v.typeName(), v.data()));
                }
            }
        }
    }

public:
    static inline const char *staticServerPath()
    { return "com.deepin.daemon.KeyBinding"; }
    static inline const char *staticInterfacePath()
    { return "/com/deepin/daemon/KeyBinding"; }
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.KeyBinding"; }

public:
    ShortcutDbus(QObject *parent = 0);

    ~ShortcutDbus();

    Q_PROPERTY(intList ConflictInvalid READ conflictInvalid NOTIFY conflictInvalidChanged)
    inline intList conflictInvalid() const
    { return qvariant_cast< intList >(property("ConflictInvalid")); }

    Q_PROPERTY(intList ConflictValid READ conflictValid NOTIFY conflictValidChanged)
    inline intList conflictValid() const
    { return qvariant_cast< intList >(property("ConflictValid")); }

    Q_PROPERTY(ShortcutInfoList CustomList READ customList NOTIFY customListChanged)
    inline ShortcutInfoList customList() const
    { return qvariant_cast< ShortcutInfoList >(property("CustomList")); }

    Q_PROPERTY(ShortcutInfoList SystemList READ systemList NOTIFY systemListChanged)
    inline ShortcutInfoList systemList() const
    { return qvariant_cast< ShortcutInfoList >(property("SystemList")); }

    Q_PROPERTY(ShortcutInfoList WindowList READ windowList NOTIFY windowListChanged)
    inline ShortcutInfoList windowList() const
    { return qvariant_cast< ShortcutInfoList >(property("WindowList")); }

    Q_PROPERTY(ShortcutInfoList WorkspaceList READ workspaceList NOTIFY workspaceListChanged)
    inline ShortcutInfoList workspaceList() const
    { return qvariant_cast< ShortcutInfoList >(property("WorkspaceList")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<int, bool> AddCustomShortcut(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("AddCustomShortcut"), argumentList);
    }
    inline QDBusReply<int> AddCustomShortcut(const QString &in0, const QString &in1, bool &out1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("AddCustomShortcut"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            out1 = qdbus_cast<bool>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<int, QString, int> AddCustomShortcutCheck(const QString &in0, const QString &in1, const QString &in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("AddCustomShortcutCheck"), argumentList);
    }
    inline QDBusReply<int> AddCustomShortcutCheck(const QString &in0, const QString &in1, const QString &in2, QString &out1, int &out2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("AddCustomShortcutCheck"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            out1 = qdbus_cast<QString>(reply.arguments().at(1));
            out2 = qdbus_cast<int>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<QString, int> CheckShortcutConflict(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("CheckShortcutConflict"), argumentList);
    }
    inline QDBusReply<QString> CheckShortcutConflict(const QString &in0, int &out1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("CheckShortcutConflict"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            out1 = qdbus_cast<int>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<> DeleteCustomShortcut(int in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DeleteCustomShortcut"), argumentList);
    }

    inline QDBusPendingReply<> GrabKbdAndMouse()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GrabKbdAndMouse"), argumentList);
    }

    inline QDBusPendingReply<> GrabSignalShortcut(const QString &in0, const QString &in1, bool in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("GrabSignalShortcut"), argumentList);
    }

    inline QDBusPendingReply<QString, int> ModifyShortcut(int in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("ModifyShortcut"), argumentList);
    }
    inline QDBusReply<QString> ModifyShortcut(int in0, const QString &in1, int &out1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("ModifyShortcut"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            out1 = qdbus_cast<int>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<bool> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void KeyPressEvent(const QString &in0);
    void KeyReleaseEvent(const QString &in0);
    void conflictInvalidChanged(intList ConflictInvalid);
    void conflictValidChanged(intList ConflictValid);
    void customListChanged(ShortcutInfoList CustomList);
    void systemListChanged(ShortcutInfoList SystemList);
    void windowListChanged(ShortcutInfoList WindowList);
    void workspaceListChanged(ShortcutInfoList WorkspaceList);
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::ShortcutDbus KeyBinding;
    }
  }
}
#endif
