/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c ShortcutDbus -p shortcutdbus file
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include <QJsonObject>
#include <QJsonArray>
#include <QJsonDocument>
#include <QDebug>

#include "shortcutdbus.h"

/*
 * Implementation of interface class ShortcutDbus
 */

enum KeyType{
    KeyTypeSystem = 0, // 0
    KeyTypeMedia = 1, // 1
    KeyTypeWM = 2, // 2
    KeyTypeCustom = 3 // 3
};

ShortcutDbus::ShortcutDbus(QObject *parent)
    : QDBusAbstractInterface(staticServerPath(), staticInterfacePath(), staticInterfaceName(), QDBusConnection::sessionBus(), parent)
{
    connect(this, &ShortcutDbus::Changed, this, &ShortcutDbus::updateShortcutList);
    connect(this, &ShortcutDbus::KeyEvent, [&](bool arg, const QString &str){
        if(arg)
            emit KeyPressEvent(str);
        else
            emit KeyReleaseEvent(str);
    });
    connect(this, &ShortcutDbus::Added, this, &ShortcutDbus::onAdded);
    connect(this, &ShortcutDbus::Deleted, this, &ShortcutDbus::onDeleted);

    QStringList list;
    list << "launcher" << "show-desktop" << "lock-screen" << "file-manager" << "switch-windows" << "switch-windows-backward"
         << "show-dock" << "screenshot" << "screenshot-full-screen" << "screenshot-window" << "screenshot-delayed"
         << "terminal" << "terminal-quake" << "logout" << "deepin-translator" << "switch-layout";

    QDBusInterface dbus("com.deepin.daemon.InputDevice.InputDevices",
                        "/com/deepin/daemon/InputDevice/TouchPad",
                        "com.deepin.daemon.InputDevice.TouchPad");
    if(dbus.property("Exist").toBool())
        list << "disable-touchpad";

    foreach (QString str, list) {
        m_idToInfoListHash[str] = &m_systemList;
    }

    list.clear();
    list << "close" << "maximize" << "unmaximize" << "minimize" << "begin-move"
         << "begin-resize" << "toggle-shaded" << "activate-window-menu";

    foreach (QString str, list) {
        m_idToInfoListHash[str] = &m_windowList;
    }

    list.clear();
    list << "switch-to-workspace-1" << "switch-to-workspace-2" << "switch-to-workspace-3" << "switch-to-workspace-4"
         << "switch-to-workspace-left" << "switch-to-workspace-right" << "switch-to-workspace-up"
         << "switch-to-workspace-down" << "move-to-workspace-1" << "move-to-workspace-2" << "move-to-workspace-3"
         << "move-to-workspace-4" << "move-to-workspace-left" << "move-to-workspace-right"
         << "move-to-workspace-up" << "move-to-workspace-down";

    foreach (QString str, list) {
        m_idToInfoListHash[str] = &m_workspaceList;
    }

    updateShortcutList("", -1);
}

ShortcutDbus::~ShortcutDbus()
{
}

int ShortcutDbus::getId()
{
    return m_intId++;
}

QString ShortcutDbus::getId(int type, const QString &id) const
{
    return QString::number(type)+id;
}

void ShortcutDbus::updateShortcutList(const QString &id, qint32 type)
{
    if(type == -1){
        m_strIdAndTypeToInfoMap.clear();
        m_intIdToInfoMap.clear();
        m_systemList.clear();
        m_windowList.clear();
        m_workspaceList.clear();
        m_customList.clear();

        QDBusPendingReply<QString> result = List();
        result.waitForFinished();

        QJsonArray list = QJsonDocument::fromJson(result.value().toUtf8()).array();

        foreach (QJsonValue obj, list) {
            QJsonObject map = obj.toObject();

            int type = map["Type"].toInt();
            QString shortcuts = map["Accels"].toArray()[0].toString();
            if(shortcuts.isEmpty())
                shortcuts = "None";
            QString name = map["Name"].toString();
            QString id = map["Id"].toString();

            switch (type) {
            case KeyTypeSystem://express
            case KeyTypeWM:{
                ShortcutInfoList *info_list = m_idToInfoListHash.value(id, NULL);
                if(info_list){
                    ShortcutInfo info = ShortcutInfo{type, getId(), id, name, shortcuts};
                    info_list->append(info);
                    m_strIdAndTypeToInfoMap[getId(type, id)] = &info_list->last();
                    m_intIdToInfoMap[info_list->last().id] = &info_list->last();
                }
                break;
            }
            case KeyTypeCustom:{
                m_customList << ShortcutInfo{type, getId(), id, name, shortcuts};
                m_strIdAndTypeToInfoMap[getId(type, id)] = &m_customList.last();
                m_intIdToInfoMap[m_customList.last().id] = &m_customList.last();
                break;
            }
            default:
                break;
            }
        }

        emit systemListChanged(m_systemList);
        emit windowListChanged(m_windowList);
        emit workspaceListChanged(m_workspaceList);
        emit customListChanged(m_customList);
    }else{
        ShortcutInfoList *info_list = m_idToInfoListHash.value(id, NULL);
        if(!info_list)
            info_list = &m_customList;

        ShortcutInfo *info = m_strIdAndTypeToInfoMap[getId(type, id)];
        if(info){
            QDBusPendingReply<QString> info_json = Query(id, type);
            info_json.waitForFinished();
            info->shortcut = QJsonDocument::fromJson(info_json.value().toUtf8()).object()["Accels"].toArray()[0].toString();
            if(info->shortcut.isEmpty())
                info->shortcut = "None";
        }

        if(info_list == &m_systemList){
            emit systemListChanged(m_systemList);
        }else if(info_list == &m_windowList){
            emit windowListChanged(m_windowList);
        }else if(info_list == &m_workspaceList){
            emit workspaceListChanged(m_workspaceList);
        }else{
            emit customListChanged(m_customList);
        }
    }
}

void ShortcutDbus::onAdded(const QString &id, qint32 type)
{
    if(type == KeyTypeCustom){
        QDBusPendingReply<QString> info_json = Query(id, type);
        info_json.waitForFinished();
        QString name = QJsonDocument::fromJson(info_json.value().toUtf8()).object()["Name"].toString();
        m_customList << ShortcutInfo{type, getId(), id, name, "None"};
        m_strIdAndTypeToInfoMap[getId(type, id)] = &m_customList.last();
        m_intIdToInfoMap[m_customList.last().id] = &m_customList.last();

        emit customListChanged(m_customList);
    }
}

void ShortcutDbus::onDeleted(const QString &id, qint32 type)
{
    if(type == KeyTypeCustom){
        const ShortcutInfo *info = m_strIdAndTypeToInfoMap[getId(type, id)];
        if(info)
            m_customList.removeOne(*info);

        emit customListChanged(m_customList);
    }
}

