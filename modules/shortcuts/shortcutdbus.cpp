/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c ShortcutDbus -p shortcutdbus file
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include <QJsonObject>
#include <QJsonArray>
#include <QJsonDocument>

#include "shortcutdbus.h"

/*
 * Implementation of interface class ShortcutDbus
 */

enum KeyType{
    KeyTypeSystem = 0, // 0
    KeyTypeMedia = 1, // 1
    KeyTypeWM = 2, // 2
    KeyTypeCustom = 3 // 3
};

ShortcutDbus::ShortcutDbus(QObject *parent)
    : QDBusAbstractInterface(staticServerPath(), staticInterfacePath(), staticInterfaceName(), QDBusConnection::sessionBus(), parent)
{
    connect(this, &ShortcutDbus::Error, [=](const QString &in0, const QString &in1){
        qDebug() << "ShortcutDbus:" << in0 << in1;
    });
    connect(this, &ShortcutDbus::Changed, this, &ShortcutDbus::updateShortcutList);
    connect(this, &ShortcutDbus::KeyEvent, [&](bool arg, const QString &str){
        if(arg)
            emit KeyPressEvent(str);
        else
            emit KeyReleaseEvent(str);
    });

    QStringList list;
    list << "launcher" << "show-desktop" << "lock-screen" << "file-manager" << "switch-windows" << "switch-windows-backward"
         << "show-dock" << "screenshot" << "screenshot-full-screen" << "screenshot-window" << "screenshot-delayed"
         << "terminal" << "terminal-quake" << "logout" << "deepin-translator" << "switch-layout";

    QDBusInterface dbus("com.deepin.daemon.InputDevice.InputDevices",
                        "/com/deepin/daemon/InputDevice/TouchPad",
                        "com.deepin.daemon.InputDevice.TouchPad");
    if(dbus.property("Exist").toBool())
        list << "disable-touchpad";

    foreach (QString str, list) {
        m_hash[str] = &m_systemList;
    }

    list.clear();
    list << "close" << "maximize" << "unmaximize" << "minimize" << "begin-move"
         << "begin-resize" << "toggle-shaded" << "activate-window-menu";

    foreach (QString str, list) {
        m_hash[str] = &m_windowList;
    }

    list.clear();
    list << "switch-to-workspace-1" << "switch-to-workspace-2" << "switch-to-workspace-3" << "switch-to-workspace-4"
         << "switch-to-workspace-left" << "switch-to-workspace-right" << "switch-to-workspace-up"
         << "switch-to-workspace-down" << "move-to-workspace-1" << "move-to-workspace-2" << "move-to-workspace-3"
         << "move-to-workspace-4" << "move-to-workspace-left" << "move-to-workspace-right"
         << "move-to-workspace-up" << "move-to-workspace-down";

    foreach (QString str, list) {
        m_hash[str] = &m_workspaceList;
    }

    updateShortcutList("");
}

ShortcutDbus::~ShortcutDbus()
{
}

void ShortcutDbus::updateShortcutList(const QString &in0)
{
    qDebug()<<in0<<this;

    m_shortcutMapList.clear();
    m_systemList.clear();
    m_windowList.clear();
    m_workspaceList.clear();
    m_customList.clear();

    QDBusPendingReply<QString> result = List();
    result.waitForFinished();

    QJsonArray list = QJsonDocument::fromJson(result.value().toUtf8()).array();

    foreach (QJsonValue obj, list) {
        QJsonObject map = obj.toObject();

        int type = map["Type"].toInt();
        QString shortcuts = map["Accels"].toArray()[0].toString();
        if(shortcuts.isEmpty())
            shortcuts = "None";
        QString name = map["Name"].toString();
        QString id = map["Id"].toString();

        m_shortcutMapList << ShortcutMapInfo{type, map["Id"].toString()};

        switch (type) {
        case KeyTypeSystem:{
            ShortcutInfoList *info_list = m_hash.value(id, NULL);
            if(info_list)
                info_list->append(ShortcutInfo{m_shortcutMapList.count()-1, name, shortcuts});
            break;
        }
        case KeyTypeWM:{
            ShortcutInfoList *info_list = m_hash.value(id, NULL);
            if(info_list)
                info_list->append(ShortcutInfo{m_shortcutMapList.count()-1, name, shortcuts});
            break;
        }
        case KeyTypeCustom:{
            m_customList << ShortcutInfo{m_shortcutMapList.count()-1, name, shortcuts};
            break;
        }
        default:
            break;
        }
    }

    emit systemListChanged(m_systemList);
    emit windowListChanged(m_windowList);
    emit workspaceListChanged(m_workspaceList);
    emit customListChanged(m_customList);
}

