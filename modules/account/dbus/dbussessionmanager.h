/**
 * Copyright (C) 2015 Deepin Technology Co., Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 **/

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusSessionManager -p dbussessionmanager com.deepin.SessionManager.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSSESSIONMANAGER_H_1439464126
#define DBUSSESSIONMANAGER_H_1439464126

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.SessionManager
 */
class DBusSessionManager: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage &msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count()) {
            return;
        }
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName != "com.deepin.SessionManager") {
            return;
        }
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        QStringList keys = changedProps.keys();
        foreach(const QString & prop, keys) {
            const QMetaObject *self = metaObject();
            for (int i = self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
                    Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
    }
public:
    static inline const char *staticService()
    { return "com.deepin.SessionManager"; }
    static inline const char *staticInterfacePath()
    { return "/com/deepin/SessionManager"; }
    static inline const char *staticInterfaceName()
    { return "com.deepin.SessionManager"; }

public:
    DBusSessionManager(QObject *parent = 0);

    ~DBusSessionManager();

    Q_PROPERTY(QString CurrentUid READ currentUid NOTIFY CurrentUidChanged)
    inline QString currentUid() const
    { return qvariant_cast< QString >(property("CurrentUid")); }

    Q_PROPERTY(int Stage READ stage NOTIFY StageChanged)
    inline int stage() const
    { return qvariant_cast< int >(property("Stage")); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
// begin property changed signals
    void CurrentUidChanged();
    void StageChanged();
};

namespace com
{
namespace deepin
{
typedef ::DBusSessionManager SessionManager;
}
}
#endif
