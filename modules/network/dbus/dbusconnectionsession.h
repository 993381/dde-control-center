/**
 * Copyright (C) 2015 Deepin Technology Co., Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 **/

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusConnectionSession -p dbusconnectionsession tmp.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSCONNECTIONSESSION_H_1446713150
#define DBUSCONNECTIONSESSION_H_1446713150

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <QDebug>

typedef QMap<QString, QStringList> AvailableKeyMap;
typedef QMap<QString, QString> ErrorMapValue;
typedef QMap<QString, ErrorMapValue> ErrorInfo;

Q_DECLARE_METATYPE(AvailableKeyMap)
Q_DECLARE_METATYPE(ErrorMapValue)
Q_DECLARE_METATYPE(ErrorInfo)

/*
 * Proxy class for interface com.deepin.daemon.ConnectionSession
 */
class DBusConnectionSession: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage &msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count()) {
            return;
        }
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName != "com.deepin.daemon.ConnectionSession") {
            return;
        }
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        foreach(const QString & prop, changedProps.keys()) {
            const QMetaObject *self = metaObject();
            for (int i = self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
                    Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
    }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.ConnectionSession"; }
    static inline const char *staticServerPath()
    { return "com.deepin.daemon.Network"; }

public:
    DBusConnectionSession(const QString &path, QObject *parent = 0);

    ~DBusConnectionSession();

    Q_PROPERTY(bool AllowDelete READ allowDelete NOTIFY AllowDeleteChanged)
    inline bool allowDelete() const
    { return qvariant_cast< bool >(property("AllowDelete")); }

    Q_PROPERTY(bool AllowEditConnectionId READ allowEditConnectionId NOTIFY AllowEditConnectionIdChanged)
    inline bool allowEditConnectionId() const
    { return qvariant_cast< bool >(property("AllowEditConnectionId")); }

    Q_PROPERTY(AvailableKeyMap AvailableKeys READ availableKeys NOTIFY AvailableKeysChanged)
    inline AvailableKeyMap availableKeys() const
    { return qvariant_cast< AvailableKeyMap >(property("AvailableKeys")); }

    Q_PROPERTY(QStringList AvailableSections READ availableSections NOTIFY AvailableSectionsChanged)
    inline QStringList availableSections() const
    { return qvariant_cast< QStringList >(property("AvailableSections")); }

    Q_PROPERTY(QStringList AvailableVirtualSections READ availableVirtualSections NOTIFY AvailableVirtualSectionsChanged)
    inline QStringList availableVirtualSections() const
    { return qvariant_cast< QStringList >(property("AvailableVirtualSections")); }

    Q_PROPERTY(ErrorInfo Errors READ errors NOTIFY ErrorsChanged)
    inline ErrorInfo errors() const
    { return qvariant_cast< ErrorInfo >(property("Errors")); }

    Q_PROPERTY(QDBusObjectPath ConnectionPath READ connectionPath NOTIFY ConnectionPathChanged)
    inline QDBusObjectPath connectionPath() const
    { return qvariant_cast< QDBusObjectPath >(property("ConnectionPath")); }

    Q_PROPERTY(QString Type READ type NOTIFY TypeChanged)
    inline QString type() const
    { return qvariant_cast< QString >(property("Type")); }

    Q_PROPERTY(QString Uuid READ uuid NOTIFY UuidChanged)
    inline QString uuid() const
    { return qvariant_cast< QString >(property("Uuid")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Close()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Close"), argumentList);
    }

    inline QDBusPendingReply<QString> DebugListKeyDetail()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("DebugListKeyDetail"), argumentList);
    }

    inline QDBusPendingReply<QString> GetAvailableValues(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("GetAvailableValues"), argumentList);
    }

    inline QDBusPendingReply<QString> GetKey(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("GetKey"), argumentList);
    }

    inline QDBusPendingReply<bool> IsDefaultExpandedSection(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("IsDefaultExpandedSection"), argumentList);
    }

    inline QDBusPendingReply<bool> Save()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Save"), argumentList);
    }

    inline QDBusPendingReply<> SetKey(const QString &in0, const QString &in1, const QString &in2)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1) << QVariant::fromValue(in2);
        return asyncCallWithArgumentList(QStringLiteral("SetKey"), argumentList);
    }

    inline QDBusPendingReply<QString> GetAllKeys()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetAllKeys"), argumentList);
    }

    inline QDBusPendingReply<QString> GetKeyName(const QString &section, const QString &key)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(section) << QVariant::fromValue(key);
        return asyncCallWithArgumentList(QStringLiteral("GetKeyName"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ConnectionDataChanged();
// begin property changed signals
    void AllowDeleteChanged();
    void AllowEditConnectionIdChanged();
    void AvailableKeysChanged();
    void AvailableSectionsChanged();
    void AvailableVirtualSectionsChanged();
    void ErrorsChanged();
    void ConnectionPathChanged();
    void TypeChanged();
    void UuidChanged();
};

namespace com
{
namespace deepin
{
namespace daemon
{
typedef ::DBusConnectionSession ConnectionSession;
}
}
}
#endif
