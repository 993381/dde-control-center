/**
 * Copyright (C) 2015 Deepin Technology Co., Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 **/

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DbusLangSelector -p dbuslangselector.h:dbuslangselector.cpp file
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSLANGSELECTOR_H_1439980208
#define DBUSLANGSELECTOR_H_1439980208

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>


struct LocaleInfo {
    QString id;
    QString name;
};

typedef QList<LocaleInfo> LocaleList;

Q_DECLARE_METATYPE(LocaleInfo)
Q_DECLARE_METATYPE(LocaleList)

QDBusArgument &operator<<(QDBusArgument &arg, const LocaleInfo &info);
const QDBusArgument &operator>>(const QDBusArgument &arg, LocaleInfo &info);

QDataStream &operator<<(QDataStream &ds, const LocaleInfo &info);
const QDataStream &operator>>(QDataStream &ds, LocaleInfo &info);

/*
 * Proxy class for interface com.deepin.daemon.LangSelector
 */
class DbusLangSelector: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage &msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count()) {
            return;
        }
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName != "com.deepin.daemon.LangSelector") {
            return;
        }
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        QStringList keys = changedProps.keys();
        foreach(const QString & prop, keys) {
            const QMetaObject *self = metaObject();
            for (int i = self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
                    Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
    }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.LangSelector"; }
    static inline const char *staticServiceName()
    { return "com.deepin.daemon.LangSelector"; }
    static inline const char *staticObjectPath()
    { return "/com/deepin/daemon/LangSelector"; }

public:
    DbusLangSelector(QObject *parent = 0);

    ~DbusLangSelector();

    Q_PROPERTY(QString CurrentLocale READ currentLocale NOTIFY CurrentLocaleChanged)
    inline QString currentLocale() const
    { return qvariant_cast< QString >(property("CurrentLocale")); }

    Q_PROPERTY(int LocaleState READ localeState NOTIFY LocaleStateChanged)
    inline int localeState() const
    { return qvariant_cast< int >(property("LocaleState")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Destroy()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Destroy"), argumentList);
    }

    inline QDBusPendingReply<LocaleList> GetLocaleList()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetLocaleList"), argumentList);
    }

    inline QDBusPendingReply<> SetLocale(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetLocale"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Changed(const QString &in0);
// begin property changed signals
    void CurrentLocaleChanged();
    void LocaleStateChanged();
};

namespace com
{
namespace deepin
{
namespace daemon
{
typedef ::DbusLangSelector LangSelector;
}
}
}
#endif
