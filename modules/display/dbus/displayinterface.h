/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p displayinterface -c DisplayInterface com.deepin.daemon.Display.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DISPLAYINTERFACE_H_1439463328
#define DISPLAYINTERFACE_H_1439463328

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Display
 */
class DisplayInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Display"; }

public:
    DisplayInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~DisplayInterface();

    Q_PROPERTY(MonitorBrightnessList Brightness READ brightness)
    inline MonitorBrightnessList brightness() const
    { return qvariant_cast< MonitorBrightnessList >(property("Brightness")); }

    Q_PROPERTY(QDBusObjectPath BuiltinOutput READ builtinOutput)
    inline QDBusObjectPath builtinOutput() const
    { return qvariant_cast< QDBusObjectPath >(property("BuiltinOutput")); }

    Q_PROPERTY(short DisplayMode READ displayMode)
    inline short displayMode() const
    { return qvariant_cast< short >(property("DisplayMode")); }

    Q_PROPERTY(bool HasChanged READ hasChanged)
    inline bool hasChanged() const
    { return qvariant_cast< bool >(property("HasChanged")); }

    Q_PROPERTY(QList<QDBusObjectPath> Monitors READ monitors)
    inline QList<QDBusObjectPath> monitors() const
    { return qvariant_cast< QList<QDBusObjectPath> >(property("Monitors")); }

    Q_PROPERTY(QString Primary READ primary)
    inline QString primary() const
    { return qvariant_cast< QString >(property("Primary")); }

    Q_PROPERTY(QRect PrimaryRect READ primaryRect)
    inline QRect primaryRect() const
    { return qvariant_cast< QRect >(property("PrimaryRect")); }

    Q_PROPERTY(ushort ScreenHeight READ screenHeight)
    inline ushort screenHeight() const
    { return qvariant_cast< ushort >(property("ScreenHeight")); }

    Q_PROPERTY(ushort ScreenWidth READ screenWidth)
    inline ushort screenWidth() const
    { return qvariant_cast< ushort >(property("ScreenWidth")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Apply()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Apply"), argumentList);
    }

    inline QDBusPendingReply<> AssociateTouchScreen(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("AssociateTouchScreen"), argumentList);
    }

    inline QDBusPendingReply<> ChangeBrightness(const QString &in0, double in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("ChangeBrightness"), argumentList);
    }

    inline QDBusPendingReply<> JoinMonitor(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("JoinMonitor"), argumentList);
    }

    inline QDBusPendingReply<QString> QueryCurrentPlanName()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("QueryCurrentPlanName"), argumentList);
    }

    inline QDBusPendingReply<int> QueryOutputFeature(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("QueryOutputFeature"), argumentList);
    }

    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline QDBusPendingReply<> ResetBrightness(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("ResetBrightness"), argumentList);
    }

    inline QDBusPendingReply<> ResetChanges()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ResetChanges"), argumentList);
    }

    inline QDBusPendingReply<> SaveChanges()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("SaveChanges"), argumentList);
    }

    inline QDBusPendingReply<> SetBrightness(const QString &in0, double in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("SetBrightness"), argumentList);
    }

    inline QDBusPendingReply<> SetPrimary(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SetPrimary"), argumentList);
    }

    inline QDBusPendingReply<> SplitMonitor(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("SplitMonitor"), argumentList);
    }

    inline QDBusPendingReply<> SwitchMode(short in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("SwitchMode"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void PrimaryChanged(MonitorBrightnessList in0);
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::DisplayInterface Display;
    }
  }
}
#endif
