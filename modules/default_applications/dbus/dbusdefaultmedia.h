/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusDefaultMedia -p dbusdefaultmedia com.deepin.daemon.MediaMount
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSDEFAULTMEDIA_H_1440936233
#define DBUSDEFAULTMEDIA_H_1440936233

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include "apptype.h"

/*
 * Proxy class for interface com.deepin.daemon.MediaMount
 */
class DBusDefaultMedia: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName !="com.deepin.daemon.MediaMount")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        QStringList keys = changedProps.keys();
        foreach(const QString &prop, keys) {
        const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
 	            Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.MediaMount"; }

public:
    DBusDefaultMedia(QObject *parent = 0);

    ~DBusDefaultMedia();

    Q_PROPERTY(bool AutoMountOpen READ autoMountOpen WRITE setAutoMountOpen NOTIFY AutoMountOpenChanged)
    inline bool autoMountOpen() const
    { return qvariant_cast< bool >(property("AutoMountOpen")); }
    inline void setAutoMountOpen(bool value)
    { setProperty("AutoMountOpen", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<AppType> DefaultMediaAppByMime(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("DefaultMediaAppByMime"), argumentList);
    }

    inline QDBusPendingReply<AppList> MediaAppListByMime(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("MediaAppListByMime"), argumentList);
    }

    inline QDBusPendingReply<bool> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

    inline QDBusPendingReply<> SetMediaAppByMime(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("SetMediaAppByMime"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void MediaActionChanged();
// begin property changed signals
void AutoMountOpenChanged();
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::DBusDefaultMedia MediaMount;
    }
  }
}
#endif
