/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -a dbustouchpad mouse.xml -p DBusTouchpad
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef DBUSTOUCHPAD_H_1438829251
#define DBUSTOUCHPAD_H_1438829251

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE


class TouchpadDeviceList
{
public:
    TouchpadDeviceList();
    ~TouchpadDeviceList();
    void registerMetaType();
    friend QDBusArgument & operator<< (QDBusArgument & argument, const TouchpadDeviceList & deviceList);
    friend const QDBusArgument & operator>> (const QDBusArgument & argument, TouchpadDeviceList & deviceList);

private:
    QString m_name;
    int m_deviceId;
    bool m_active;
};

Q_DECLARE_METATYPE(TouchpadDeviceList)

/*
 * Proxy class for interface com.deepin.daemon.InputDevice.TouchPad
 */
class ComDeepinDaemonInputDeviceTouchPadInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.InputDevice.TouchPad"; }

public:
    ComDeepinDaemonInputDeviceTouchPadInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComDeepinDaemonInputDeviceTouchPadInterface();

    Q_PROPERTY(int DeltaScroll READ deltaScroll WRITE setDeltaScroll)
    inline int deltaScroll() const
    { return qvariant_cast< int >(property("DeltaScroll")); }
    inline void setDeltaScroll(int value)
    { setProperty("DeltaScroll", QVariant::fromValue(value)); }

    Q_PROPERTY(TouchpadDeviceList DeviceList READ deviceList)
    inline TouchpadDeviceList deviceList() const
    { return qvariant_cast< TouchpadDeviceList >(property("DeviceList")); }

    Q_PROPERTY(bool DisableIfTyping READ disableIfTyping WRITE setDisableIfTyping)
    inline bool disableIfTyping() const
    { return qvariant_cast< bool >(property("DisableIfTyping")); }
    inline void setDisableIfTyping(bool value)
    { setProperty("DisableIfTyping", QVariant::fromValue(value)); }

    Q_PROPERTY(int DoubleClick READ doubleClick WRITE setDoubleClick)
    inline int doubleClick() const
    { return qvariant_cast< int >(property("DoubleClick")); }
    inline void setDoubleClick(int value)
    { setProperty("DoubleClick", QVariant::fromValue(value)); }

    Q_PROPERTY(int DragThreshold READ dragThreshold WRITE setDragThreshold)
    inline int dragThreshold() const
    { return qvariant_cast< int >(property("DragThreshold")); }
    inline void setDragThreshold(int value)
    { setProperty("DragThreshold", QVariant::fromValue(value)); }

    Q_PROPERTY(bool EdgeScroll READ edgeScroll WRITE setEdgeScroll)
    inline bool edgeScroll() const
    { return qvariant_cast< bool >(property("EdgeScroll")); }
    inline void setEdgeScroll(bool value)
    { setProperty("EdgeScroll", QVariant::fromValue(value)); }

    Q_PROPERTY(bool Exist READ exist)
    inline bool exist() const
    { return qvariant_cast< bool >(property("Exist")); }

    Q_PROPERTY(bool HorizScroll READ horizScroll WRITE setHorizScroll)
    inline bool horizScroll() const
    { return qvariant_cast< bool >(property("HorizScroll")); }
    inline void setHorizScroll(bool value)
    { setProperty("HorizScroll", QVariant::fromValue(value)); }

    Q_PROPERTY(bool LeftHanded READ leftHanded WRITE setLeftHanded)
    inline bool leftHanded() const
    { return qvariant_cast< bool >(property("LeftHanded")); }
    inline void setLeftHanded(bool value)
    { setProperty("LeftHanded", QVariant::fromValue(value)); }

    Q_PROPERTY(double MotionAcceleration READ motionAcceleration WRITE setMotionAcceleration)
    inline double motionAcceleration() const
    { return qvariant_cast< double >(property("MotionAcceleration")); }
    inline void setMotionAcceleration(double value)
    { setProperty("MotionAcceleration", QVariant::fromValue(value)); }

    Q_PROPERTY(double MotionThreshold READ motionThreshold WRITE setMotionThreshold)
    inline double motionThreshold() const
    { return qvariant_cast< double >(property("MotionThreshold")); }
    inline void setMotionThreshold(double value)
    { setProperty("MotionThreshold", QVariant::fromValue(value)); }

    Q_PROPERTY(bool NaturalScroll READ naturalScroll WRITE setNaturalScroll)
    inline bool naturalScroll() const
    { return qvariant_cast< bool >(property("NaturalScroll")); }
    inline void setNaturalScroll(bool value)
    { setProperty("NaturalScroll", QVariant::fromValue(value)); }

    Q_PROPERTY(bool TPadEnable READ tPadEnable WRITE setTPadEnable)
    inline bool tPadEnable() const
    { return qvariant_cast< bool >(property("TPadEnable")); }
    inline void setTPadEnable(bool value)
    { setProperty("TPadEnable", QVariant::fromValue(value)); }

    Q_PROPERTY(bool TapClick READ tapClick WRITE setTapClick)
    inline bool tapClick() const
    { return qvariant_cast< bool >(property("TapClick")); }
    inline void setTapClick(bool value)
    { setProperty("TapClick", QVariant::fromValue(value)); }

    Q_PROPERTY(bool VertScroll READ vertScroll WRITE setVertScroll)
    inline bool vertScroll() const
    { return qvariant_cast< bool >(property("VertScroll")); }
    inline void setVertScroll(bool value)
    { setProperty("VertScroll", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace deepin {
    namespace daemon {
      namespace InputDevice {
        typedef ::ComDeepinDaemonInputDeviceTouchPadInterface TouchPad;
      }
    }
  }
}

#endif
