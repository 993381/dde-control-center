/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp touchpad.xml -p MouseInterface
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSMOUSE_H
#define DBUSMOUSE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>


class MouseDeviceList
{
public:
    MouseDeviceList();
    ~MouseDeviceList();
    void registerMetaType();
    friend QDBusArgument & operator<< (QDBusArgument & argument, const MouseDeviceList & deviceList);
    friend const QDBusArgument & operator>> (const QDBusArgument & argument, MouseDeviceList & deviceList);
    void printValue();  // for test

private:
    QString m_name;
    int m_deviceId;
    bool m_active;
};

Q_DECLARE_METATYPE(MouseDeviceList)

/*
 * Proxy class for interface com.deepin.daemon.InputDevice.Mouse
 */
class ComDeepinDaemonInputDeviceMouseInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.InputDevice.Mouse"; }

public:
    ComDeepinDaemonInputDeviceMouseInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComDeepinDaemonInputDeviceMouseInterface();

    Q_PROPERTY(MouseDeviceList DeviceList READ deviceList)
    inline MouseDeviceList deviceList() const
    { return qvariant_cast< MouseDeviceList >(property("DeviceList")); }

    Q_PROPERTY(bool DisableTpad READ disableTpad WRITE setDisableTpad)
    inline bool disableTpad() const
    { return qvariant_cast< bool >(property("DisableTpad")); }
    inline void setDisableTpad(bool value)
    { setProperty("DisableTpad", QVariant::fromValue(value)); }

    Q_PROPERTY(int DoubleClick READ doubleClick WRITE setDoubleClick)
    inline int doubleClick() const
    { return qvariant_cast< int >(property("DoubleClick")); }
    inline void setDoubleClick(int value)
    { setProperty("DoubleClick", QVariant::fromValue(value)); }

    Q_PROPERTY(int DragThreshold READ dragThreshold WRITE setDragThreshold)
    inline int dragThreshold() const
    { return qvariant_cast< int >(property("DragThreshold")); }
    inline void setDragThreshold(int value)
    { setProperty("DragThreshold", QVariant::fromValue(value)); }

    Q_PROPERTY(bool Exist READ exist)
    inline bool exist() const
    { return qvariant_cast< bool >(property("Exist")); }

    Q_PROPERTY(bool LeftHanded READ leftHanded WRITE setLeftHanded)
    inline bool leftHanded() const
    { return qvariant_cast< bool >(property("LeftHanded")); }
    inline void setLeftHanded(bool value)
    { setProperty("LeftHanded", QVariant::fromValue(value)); }

    Q_PROPERTY(bool MiddleButtonEmulation READ middleButtonEmulation WRITE setMiddleButtonEmulation)
    inline bool middleButtonEmulation() const
    { return qvariant_cast< bool >(property("MiddleButtonEmulation")); }
    inline void setMiddleButtonEmulation(bool value)
    { setProperty("MiddleButtonEmulation", QVariant::fromValue(value)); }

    Q_PROPERTY(double MotionAcceleration READ motionAcceleration WRITE setMotionAcceleration)
    inline double motionAcceleration() const
    { return qvariant_cast< double >(property("MotionAcceleration")); }
    inline void setMotionAcceleration(double value)
    { setProperty("MotionAcceleration", QVariant::fromValue(value)); }

    Q_PROPERTY(double MotionThreshold READ motionThreshold WRITE setMotionThreshold)
    inline double motionThreshold() const
    { return qvariant_cast< double >(property("MotionThreshold")); }
    inline void setMotionThreshold(double value)
    { setProperty("MotionThreshold", QVariant::fromValue(value)); }

    Q_PROPERTY(bool NaturalScroll READ naturalScroll WRITE setNaturalScroll)
    inline bool naturalScroll() const
    { return qvariant_cast< bool >(property("NaturalScroll")); }
    inline void setNaturalScroll(bool value)
    { setProperty("NaturalScroll", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace deepin {
    namespace daemon {
      namespace InputDevice {
        typedef ::ComDeepinDaemonInputDeviceMouseInterface Mouse;
      }
    }
  }
}
#endif
