/**
 * Copyright (C) 2015 Deepin Technology Co., Ltd.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 **/

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c SearchDbus -p searchdbus file
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SEARCHDBUS_H_1439349450
#define SEARCHDBUS_H_1439349450

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include <QMap>

/*
 * Proxy class for interface com.deepin.daemon.Search
 */
class SearchDbus: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticServerPath()
    { return "com.deepin.daemon.Search"; }
    static inline const char *staticInterfacePath()
    { return "/com/deepin/daemon/Search"; }
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Search"; }

public:
    SearchDbus(QObject *parent = 0);

    ~SearchDbus();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString, bool> NewSearchWithStrDict(const QMap<QString, QString> &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("NewSearchWithStrDict"), argumentList);
    }
    inline QDBusReply<QString> NewSearchWithStrDict(const QMap<QString, QString> &in0, bool &out1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("NewSearchWithStrDict"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            out1 = qdbus_cast<bool>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QString, bool> NewSearchWithStrList(const QStringList &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("NewSearchWithStrList"), argumentList);
    }
    inline QDBusReply<QString> NewSearchWithStrList(const QStringList &in0, bool &out1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("NewSearchWithStrList"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            out1 = qdbus_cast<bool>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QStringList> SearchStartWithString(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("SearchStartWithString"), argumentList);
    }

    inline QDBusPendingReply<QStringList> SearchString(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("SearchString"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com
{
namespace deepin
{
namespace daemon
{
typedef ::SearchDbus Search;
}
}
}
#endif
